<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cafe">


	<!-- 카페 추가 및 카페번호 가져오기 -->
	<insert id="addCafeKey" parameterType="com.nextroom.vo.CafeVo">
		<selectKey keyProperty="cafeNo" resultType="int" order="BEFORE">
			select cafeNo.nextval from dual
		</selectKey>
		<![CDATA[	
			insert into cafe
				values (#{cafeNo}, 
						#{userNo}, 
						#{cafeName}, 
						#{cafeHp}, 
						#{openTime}, 
						#{closeTime}, 
						#{cafeIntro}, 
						#{url}, 
						#{cafeImg},
						#{postCode},
						#{address}, 
						#{addressDetail},  
						#{printAddress}, 
						#{sido}, 
						#{sigungu},
						#{sidoDetail},
						#{latitude},
						#{longitude},
						'available'
						)
	    	]]>
	</insert>


	<!-- 유저 타입 수정 -->
	<update id="updateUser" parameterType="int">
		<![CDATA[
				update users
				set userType = 2
				where userNo = #{userNo}
			]]>
	</update>

	<!-- 카페 내부이미지 추가 -->
	<insert id="addInteriorImg" parameterType="com.nextroom.vo.InteriorVo"> 
		<![CDATA[ 
				insert into interiorImg 
				values (
						interiorNo.nextval,						
						#{cafeNo},
						#{img}
				) ]]>
	</insert>

	<!-- 카페 한개 정보 가져오기 -->
	<select id="getCafe" parameterType="int" resultType="com.nextroom.vo.CafeVo">
		<![CDATA[
			select cafeName, cafeHp, openTime, closeTime, 
				   cafeIntro, url, cafeImg, postCode, address, addressDetail, printAddress, sido, sigungu, sidoDetail, latitude, longitude
			from cafe
			where cafeNo = #{cafeNo}
		]]>

	</select>

	<!-- 카페 내부이미지 리스트 가져오기 -->
	<select id="getInteList" parameterType="int" resultType="com.nextroom.vo.InteriorVo">
		<![CDATA[
			select  interiorNo,
					img
			from INTERIORIMG
			where cafeNo = #{cafeNo}
		]]>

	</select>


	<!-- 카페 전체 리스트 가져오기 -->
	<select id="getCafeList" parameterType="String" resultType="com.nextroom.vo.CafeVo">
	
		<![CDATA[
			select cafeNo, cafeName, cafeHp, openTime, closeTime, 
				   cafeIntro, cafeImg, printAddress, sidoDetail
			from cafe
			
		]]>
		<choose>
			<when test="_parameter == '전국'">
			</when>
			<otherwise>
				<choose>
					<when test="_parameter == '서울'">
						where sido = #{region}
					</when>
					<when test="_parameter == '세종'">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="_parameter == '충청'">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="_parameter == '제주'">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="_parameter == '경상'">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="_parameter == '경상'">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="_parameter == '전라'">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="_parameter == '충청'">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="_parameter == '강원'">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="_parameter == '경기'">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="_parameter == '전라'">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="_parameter == '울산'">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="_parameter == '부산'">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="_parameter == '대구'">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="_parameter == '대전'">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="_parameter == '인천'">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="_parameter == '광주'">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>

					<otherwise>
						<choose>
							<when test="_parameter != '' and _parameter != null">
								where sidoDetail = #{region}
							</when>
						</choose>
					</otherwise>
				</choose>
			</otherwise>
		</choose>
		
		<![CDATA[
		order by cafeNo desc
		]]>

	</select>


	<!-- 페이징 카페 전체 리스트 가져오기 -->


	<select id="gggggg" parameterType="map" resultType="com.nextroom.vo.CafeVo">
		<![CDATA[
			select  rt.rn,
			        rt.cafeNo,
			        rt.cafeName,
			        rt.cafeHp,
			        rt.openTime,
			        rt.closeTime,
			        rt.cafeIntro,
			        rt.cafeImg,
			        rt.printAddress,
			        rt.sidoDetail
			from ( select  rownum rn,
			               ot.cafeNo,
			               ot.cafeName,
			               ot.cafeHp,
			               ot.openTime,
			               ot.closeTime,
			               ot.cafeIntro,
			               ot.cafeImg,
			               ot.printAddress,
			               ot.sidoDetail
			       from( select  cafeNo, cafeName, cafeHp, openTime, closeTime, 
							   cafeIntro, cafeImg, printAddress, sidoDetail
			             from cafe 
		
		
		
             			 order by cafeNo desc ) ot ) rt 
             
			where rn >= #{startNum}
			and rn <= #{cnt}

		]]>

	</select>

	<!-- ajax 페이징 리스트 가져오기 -->
	<select id="getApiCafeList" parameterType="map" resultType="com.nextroom.vo.CafeVo">
		<![CDATA[
			select  rt.rn,
			        rt.cafeNo,
			        rt.cafeName,
			        rt.cafeHp,
			        rt.openTime,
			        rt.closeTime,
			        rt.cafeIntro,
			        rt.cafeImg,
			        rt.printAddress,
			        rt.sido,
			        rt.sidoDetail
			from ( select  rownum rn,
			               ot.cafeNo,
			               ot.cafeName,
			               ot.cafeHp,
			               ot.openTime,
			               ot.closeTime,
			               ot.cafeIntro,
			               ot.cafeImg,
			               ot.printAddress,
			               ot.sido,
			               ot.sidoDetail
			       from( select  cafeNo, cafeName, cafeHp, openTime, closeTime, 
							   cafeIntro, cafeImg, printAddress, sido, sidoDetail
			             from cafe 
		
		]]>
		<choose>
			<when test="region.equals('전국')">
			</when>
			<otherwise>
				<choose>
					<when test="region.equals('서울')">
						where sido = #{region}
					</when>

					<when test="region.equals('세종')">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="region.equals('충청')">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="region.equals('제주')">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="region.equals('경상')">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="region.equals('경상')">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="region.equals('전라')">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="region.equals('충청')">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="region.equals('강원')">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="region.equals('경기')">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="region.equals('전라')">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="region.equals('울산')">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="region.equals('부산')">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="region.equals('대구')">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="region.equals('대전')">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="region.equals('인천')">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<when test="region.equals('광주')">
						WHERE sido LIKE '%' || #{region} || '%'
					</when>
					<otherwise>
						<choose>
							<when test="region != '' and region != null">
								where sidoDetail = #{region}
							</when>

						</choose>
					</otherwise>
				</choose>
			</otherwise>
		</choose>
						
		<![CDATA[
             			 order by cafeNo desc ) ot ) rt 
             
			where rn >= #{startNum}
			and rn <= #{cnt}

		]]>

	</select>


	<select id="getApiThemeList" parameterType="map" resultType="com.nextroom.vo.CafeVo">
		<![CDATA[
			select 	rn.rn,
			        rn.cafeName,
			        rn.cafeNo,
			        rn.THEMENO, 
			        rn.THEMENAME,
			        rn.THEMEIMG,
			        rn.JENRE,
			        rn.LEVELS,
			        rn.THEMETYPE,
			        rn.PLAYTIME,
			        rn.ACTIVITY,
			        rn.THEMEINTRO,
			        rn.PRECOMMENDMIN,
			        rn.PRECOMMENDMAX,
			        rn.pMin,
			        rn.pMax,
			        rn.reviewCount,
			        rn.aRating, 
			        rn.aFeelLevel
			from (select 	rownum rn,
			                ot.cafeName,
			                ot.cafeNo,
			                ot.THEMENO, 
			                ot.THEMENAME,
			                ot.THEMEIMG,
			                ot.JENRE,
			                ot.LEVELS,
			                ot.THEMETYPE,
			                ot.PLAYTIME,
			                ot.ACTIVITY,
			                ot.THEMEINTRO,
			                ot.PRECOMMENDMIN,
			                ot.PRECOMMENDMAX,
			                ot.pMin,
			                ot.pMax,
			                ot.reviewCount,
			                ot.aRating, 
			                ot.aFeelLevel
			        from (select 	c.cafeName,
			                        c.cafeNo,
			                        th.THEMENO, 
			                        th.THEMENAME,
			                        th.THEMEIMG,
			                        th.JENRE,
			                        th.LEVELS,
			                        th.THEMETYPE,
			                        th.PLAYTIME,
			                        th.ACTIVITY,
			                        th.THEMEINTRO,
			                        th.PRECOMMENDMIN,
			                        th.PRECOMMENDMAX,
			                        th.pMin,
			                        th.pMax,
			                        a.reviewCount,
			                        a.aRating, 
			                        a.aFeelLevel
			                from cafe c, theme th, (select  themeNo, count(REVIEWNO) reviewCount, round(avg(rating),1) aRating, round(avg(feelLevel),1) aFeelLevel
			                                        from review
			                                        GROUP BY themeNo) a
			                where c.cafeNo = th.cafeNo
			                and a.themeNo(+) = th.themeNo
			                and th.state = 'available'
		]]>
		<if test="keyword != null and keyword !='' ">
			and th.themeName like '%'|| #{keyword} ||'%'
		</if> 
        <![CDATA[
			                order by a.aRating desc, a.reviewCount desc, a.aFeelLevel desc)ot )rn
			where rn >= #{startNum}
			and rn <= #{cnt}
			order by rn.aRating desc, rn.reviewCount desc, rn.aFeelLevel desc
		]]>

	</select>



	<!-- 카페 상세 정보 가져오기 -->
	<select id="getOneCafe" parameterType="int" resultType="com.nextroom.vo.CafeVo">
	
		<![CDATA[
			select cafeNo, cafeName, cafeHp, openTime, closeTime, 
				   cafeIntro, cafeImg, printAddress, sidoDetail
			from cafe
			where cafeNo = #{cafeNo}
		]]>

	</select>



	<!-- 테마 추가 -->
	<insert id="addTheme" parameterType="com.nextroom.vo.CafeVo">

		<selectKey keyProperty="themeNo" resultType="int" order="BEFORE">
			select themeNo.nextval from dual
		</selectKey>
		
		<![CDATA[ 
				insert into theme
				values (
						#{themeNo},
						#{cafeNo},
						#{themeName},
						#{themeImg},
						#{jenre},
						#{levels},
						#{themeType},
						#{playTime},
						#{activity},
						#{themeIntro},
						#{pRecommendMin},
						#{pRecommendMax},
						#{pMin},
						#{pMax},
						'available'
				) ]]>
	</insert>

	<!-- 테마 가격 추가 -->
	<insert id="addThemePrice" parameterType="com.nextroom.vo.PriceVo"> 
		<![CDATA[ 
				insert into themePrice
				values (
						#{themeNo},
						#{headCount},
						#{price}
				) ]]>
	</insert>



	<!-- 테마 시간표 추가 -->
	<insert id="addThemeTime" parameterType="com.nextroom.vo.TimeVo"> 
		<![CDATA[ 
				insert into themeTime
				values (
						themeTimeNo.nextval,
						#{themeNo},
						#{themeTime}
				) ]]>
	</insert>




	<!-- 카페 내 전체 테마 정보 가져오기 -->
	<select id="getCafeTheme" parameterType="int" resultType="com.nextroom.vo.CafeVo">
	
		<![CDATA[
			select 	c.cafeName,
	                c.cafeNo,
	                th.THEMENO, 
	                th.THEMENAME,
	                th.THEMEIMG,
	                th.JENRE,
	                th.LEVELS,
	                th.THEMETYPE,
	                th.PLAYTIME,
	                th.ACTIVITY,
	                th.THEMEINTRO,
	                th.PRECOMMENDMIN,
	                th.PRECOMMENDMAX,
	                th.pMin,
	                th.pMax,
	                a.reviewCount,
	                a.aRating, 
	                a.aFeelLevel
	        from cafe c, theme th, (select  themeNo, count(REVIEWNO) reviewCount, round(avg(rating),1) aRating, round(avg(feelLevel),1) aFeelLevel
	                                from review
	                                GROUP BY themeNo) a
	        where c.cafeNo = th.cafeNo
	        and a.themeNo(+) = th.themeNo
	        and th.state = 'available'
	        and c.cafeNo = #{cafeNo}
        	order by a.aRating desc, a.reviewCount desc, a.aFeelLevel desc
		]]>

	</select>

	<!-- 전체 테마 리스트 가져오기 -->
	<select id="getThemeList" parameterType="Map" resultType="com.nextroom.vo.CafeVo">
	
		<![CDATA[
			select 	c.cafeName,
	                c.cafeNo,
	                th.THEMENO, 
	                th.THEMENAME,
	                th.THEMEIMG,
	                th.JENRE,
	                th.LEVELS,
	                th.THEMETYPE,
	                th.PLAYTIME,
	                th.ACTIVITY,
	                th.THEMEINTRO,
	                th.PRECOMMENDMIN,
	                th.PRECOMMENDMAX,
	                th.pMin,
	                th.pMax,
	                a.reviewCount,
	                a.aRating, 
	                a.aFeelLevel
	        from cafe c, theme th, (select  themeNo, count(REVIEWNO) reviewCount, round(avg(rating),1) aRating, round(avg(feelLevel),1) aFeelLevel
	                                from review
	                                GROUP BY themeNo) a
	        where c.cafeNo = th.cafeNo
	        and a.themeNo(+) = th.themeNo
	        and th.state = 'available'
		]]>
		<if test="keyword != null and keyword !='' ">
			and th.themeName like '%'|| #{keyword} ||'%'
		</if> 
 		<![CDATA[
        	order by a.aRating desc, a.reviewCount desc, a.aFeelLevel desc
		]]>
	</select>



	<!-- 테마 검색하기 -->
	<select id="themeSearchList" parameterType="Map" resultType="com.nextroom.vo.CafeVo">
	
		<![CDATA[
			select 	c.cafeName,
	                c.cafeNo,
	                c.sidoDetail,
	                th.THEMENO, 
	                th.THEMENAME,
	                th.THEMEIMG,
	                th.JENRE,
	                th.LEVELS,
	                th.THEMETYPE,
	                th.PLAYTIME,
	                th.ACTIVITY,
	                th.THEMEINTRO,
	                th.PRECOMMENDMIN,
	                th.PRECOMMENDMAX,
	                th.pMin,
	                th.pMax,
	                a.reviewCount,
	                a.aRating, 
	                a.aFeelLevel
	        from cafe c, theme th, (select  themeNo, count(REVIEWNO) reviewCount, round(avg(rating),1) aRating, round(avg(feelLevel),1) aFeelLevel
	                                from review
	                                GROUP BY themeNo) a
	        where c.cafeNo = th.cafeNo
	        and a.themeNo(+) = th.themeNo
	        and th.state = 'available'
		]]>

		<if test="sidoDetail != null and sidoDetail !=''">
			and c.sidoDetail in
			<foreach item="sidoDetail" collection="sidoDetail" open="(" close=")" separator=",">
				#{sidoDetail}
			</foreach>
		</if>
		<if test="jenre != null and jenre !=''">
			and th.jenre in
			<foreach item="jenre" collection="jenre" open="(" close=")" separator=",">
				#{jenre}
			</foreach>
		</if>
		<if test="themeType != null and themeType !=''">
			and th.themeType in
			<foreach item="themeType" collection="themeType" open="(" close=")" separator=",">
				#{themeType}
			</foreach>
		</if>
		<!-- <if test="headCount != null"> and th.pMin in <foreach item="headCount" collection="headCount" open="(" close=")" separator=","> #{headCount} </foreach> 
			</if> -->
		<if test="levels != null and levels !=''">
			and th.levels in
			<foreach item="levels" collection="levels" open="(" close=")" separator=",">
				#{levels}
			</foreach>
		</if>
		<if test="activity != null and activity !=''">
			and th.activity in
			<foreach item="activity" collection="activity" open="(" close=")" separator=",">
				#{activity}
			</foreach>
		</if>

		<if test="keyword != null and keyword !='' ">
			and th.themeName like '%'|| #{keyword} ||'%'
		</if> 
 		<![CDATA[
        	order by a.aRating desc, a.reviewCount desc, a.aFeelLevel desc
		]]>
	</select>


	<!-- 탑 10 테마 리스트 가져오기 -->
	<select id="get10Theme" resultType="com.nextroom.vo.CafeVo">
	
		<![CDATA[
			select  r.cafeName,
			        r.THEMENO, 
			        r.THEMENAME,
			        r.THEMEIMG,
			        r.JENRE,
			        r.LEVELS,
			        r.THEMETYPE,
			        r.PLAYTIME,
			        r.ACTIVITY,
			        r.THEMEINTRO,
			        r.PRECOMMENDMIN,
			        r.PRECOMMENDMAX,
			        r.pMin,
			        r.pMax,
			        r.reviewCount,
			        r.arating,
			        r.afeellevel
			from (select    c.cafeName,
			                th.THEMENO, 
			                th.THEMENAME,
			                th.THEMEIMG,
			                th.JENRE,
			                th.LEVELS,
			                th.THEMETYPE,
			                th.PLAYTIME,
			                th.ACTIVITY,
			                th.THEMEINTRO,
			                th.PRECOMMENDMIN,
			                th.PRECOMMENDMAX,
			                th.pMin,
			                th.pMax,
			                a.reviewCount,
			                a.arating,
			                a.afeellevel
			        from cafe c,theme th, (select  themeNo, count(rating)reviewCount, round(avg(rating),1) aRating, round(avg(feelLevel),1) aFeelLevel
			                                from review
			                                GROUP BY themeNo) a
			        where a.themeNo = th.themeNo
			        and c.cafeNo = th.cafeNo
			        and th.state = 'available'
			        order by a.arating desc, a.reviewCount desc, a.afeellevel desc)r
			where rownum<=10
			order by arating desc
		]]>

	</select>




	<!-- 전체 테마 가격 가져오기 -->
	<select id="getAllPrice" parameterType="com.nextroom.vo.CafeVo" resultType="com.nextroom.vo.PriceVo">
	
		<![CDATA[
			select  th.themeName,
					th.PLAYTIME,
					p.THEMENO,
					p.HEADCOUNT,
					p.PRICE
			from cafe c, theme th, themePrice p
			where c.cafeNo = th.cafeNo
			and th.themeNo = p.themeNo
			and c.cafeNo = #{cafeNo}
			and p.HEADCOUNT = #{pMin}
			and th.state = 'available'
		]]>

	</select>

	<!-- 전체 테마 가격 가져오기 -->
	<select id="aaa" parameterType="int" resultType="com.nextroom.vo.PriceVo">
	
		<![CDATA[
			select  th.themeName,
					th.playTime,
					p.themeNo,
					p.headCount,
					p.price
			from cafe c, theme th, themePrice p
			where c.cafeNo = th.cafeNo
			and th.themeNo = p.themeNo
			and c.cafeNo = #{cafeNo}
			and th.state = 'available'
		]]>

	</select>


	<!-- 테마 리뷰 체감난이도, 별점 가져오기 -->
	<select id="getRating" parameterType="int" resultType="com.nextroom.vo.ReviewBoardVo">
	
		<![CDATA[
			select r.feellevel, r.rating
			from cafe c, theme th, review r
			where c.cafeNo = th.cafeNo
			and th.themeNo = r.themeNo
			and c.cafeNo = #{cafeNo}
		]]>

	</select>

	<!-- 테마 전체 최대최소인원 가져오기 -->
	<select id="getMinMaxP" parameterType="int" resultType="com.nextroom.vo.CafeVo">
	
		<![CDATA[
			select min(pMin)minPMin, max(pMax) maxPMax
			from theme
			where cafeNo = #{cafeNo}
			and state = 'available'
		]]>

	</select>

	<!-- 테마당 인원별 가격 한개 가져오기 -->
	<select id="getPriceOne" parameterType="com.nextroom.vo.PriceVo" resultType="Integer">
	
		<![CDATA[
			select p.price
			from themePrice p,theme th
			where th.themeNo = p.themeNo
			and th.themeNo = #{themeNo}
			and p.headCount = #{headCount}
			and th.state = 'available'
			
		]]>

	</select>

	<!-- 테마 상세 출력용 리뷰 포함 한개 정보 가져오기 -->
	<select id="getOneTheme" parameterType="int" resultType="com.nextroom.vo.CafeVo">
	
		<![CDATA[
			select 	c.cafeName,
					c.cafeNo,
					c.sidoDetail,
					th.THEMENO, 
					th.THEMENAME,
					th.THEMEIMG,
					th.JENRE,
					th.LEVELS,
					th.THEMETYPE,
					th.PLAYTIME,
					th.ACTIVITY,
					th.THEMEINTRO,
					th.PRECOMMENDMIN,
					th.PRECOMMENDMAX,
					th.pMin,
					th.pMax,
                    a.reviewCount,
                    a.aRating, 
                    a.aFeelLevel
			from cafe c, theme th, (select  themeNo, count(REVIEWNO) reviewCount, round(avg(rating),1) aRating, round(avg(feelLevel),1) aFeelLevel
                                    from review
                                    where themeNo = #{themeNo}
                                    GROUP BY themeNo) a
			where c.cafeNo = th.cafeNo
			and th.themeNo = #{themeNo}
			and a.themeNo(+) = th.themeNo
			and th.state = 'available'
			
		]]>

	</select>

	<!-- 테마 한개 정보 가져오기(수정용) -->
	<select id="getModiTheme" parameterType="int" resultType="com.nextroom.vo.CafeVo">
	
		<![CDATA[
			select 	c.cafeName,
					c.cafeNo,
					th.THEMENO, 
					th.THEMENAME,
					th.THEMEIMG,
					th.JENRE,
					th.LEVELS,
					th.THEMETYPE,
					th.PLAYTIME,
					th.ACTIVITY,
					th.THEMEINTRO,
					th.PRECOMMENDMIN,
					th.PRECOMMENDMAX,
					th.pMin,
					th.pMax
			from cafe c, theme th
			where c.cafeNo = th.cafeNo
			and th.themeNo = #{themeNo}
			and th.state = 'available'
			
		]]>

	</select>


	<!-- 테마 한개 시간표 가져오기 -->
	<select id="getOneTime" parameterType="int" resultType="com.nextroom.vo.TimeVo">
	
		<![CDATA[
			select  t.THEMETIMENO,
					t.THEMETIME
			from theme th, themeTime t
			where th.themeNo = t.themeNo
			and th.themeNo = #{themeNo}
			and th.state = 'available'
			order by t.THEMETIME asc
		]]>

	</select>


	<!-- 테마 한개 가격표 가져오기 -->
	<select id="getOnePrice" parameterType="int" resultType="com.nextroom.vo.PriceVo">
	
		<![CDATA[
			select  th.themeName,
					th.playTime,
					p.themeNo,
					p.headCount,
					p.price
			from cafe c, theme th, themePrice p
			where c.cafeNo = th.cafeNo
			and th.themeNo = p.themeNo
			and th.themeNo = #{themeNo}
			and th.state = 'available'
			order by p.headCount asc
			
		]]>

	</select>

	<!-- 테마 한개 리뷰 가져오기 -->
	<select id="getReviewList" parameterType="int" resultType="com.nextroom.vo.ReviewBoardVo">
	
		<![CDATA[
			select  r.REVIEWNO,
					r.THEMENO,
					r.USERNO,
					r.FEELLEVEL,
					r.RATING,
					r.RECTIME,
					r.REVIEWHINTS,
					r.REVIEWCLEAR,
					r.MEMBERNUM,
					to_char(r.PLAYDATE, 'yyyy-mm-dd') playDate,
					r.REVIEWREGDATE,
					r.REVIEWLIKE,
					r.REVIEWTITLE,
					r.REVIEWCONTENT,
					r.REVIEWHIT,
					u.NICKNAME 
			from review r, users u
			where r.userNo = u.userNo
			and r.themeNo = #{themeNo}
			order by r.REVIEWNO desc
		]]>

	</select>


	<!-- 테마 한개 리뷰 가져오기(테마 평균 체감난이도, 별점 포함) -->
	<!-- <select id="getReviewListAvg" parameterType="int" resultType="com.nextroom.vo.ReviewBoardVo"> -->

	<!-- <![CDATA[ -->
	<!-- select r.REVIEWNO, -->
	<!-- r.THEMENO, -->
	<!-- r.USERNO, -->
	<!-- r.FEELLEVEL, -->
	<!-- r.RATING, -->
	<!-- r.RECTIME, -->
	<!-- r.REVIEWHINTS, -->
	<!-- r.REVIEWCLEAR, -->
	<!-- r.MEMBERNUM, -->
	<!-- to_char(r.PLAYDATE, 'yyyy-mm-dd') playDate, -->
	<!-- r.REVIEWREGDATE, -->
	<!-- r.REVIEWLIKE, -->
	<!-- r.REVIEWTITLE, -->
	<!-- r.REVIEWCONTENT, -->
	<!-- r.REVIEWHIT, -->
	<!-- u.NICKNAME, -->
	<!-- avg.aRating, -->
	<!-- avg.aFeelLevel -->
	<!-- from review r, users u, (select themeNo, avg(rating) aRating, avg(feelLevel) aFeelLevel -->
	<!-- from review -->
	<!-- where themeNo = #{themeNo} -->
	<!-- GROUP BY themeNo)avg -->
	<!-- where r.userNo = u.userNo -->
	<!-- and r.themeNo = #{themeNo} -->
	<!-- order by r.REVIEWNO desc -->
	<!-- ]]> -->

	<!-- </select> -->

	<!-- 테마 한개 리뷰 개수 가져오기 -->
	<!-- <select id="getReviewCount" parameterType="int" resultType="int"> -->

	<!-- <![CDATA[ -->

	<!-- select count(r.REVIEWNO ), avg(rating) aRating, avg(feelLevel) aFeelLevel -->
	<!-- from review r, users u -->
	<!-- where r.userNo = u.userNo -->
	<!-- and r.themeNo = #{themeNo} -->

	<!-- ]]> -->

	<!-- </select> -->

	<!-- 전체 테마 체감난이도, 평점 가져오기 -->
	<!-- <select id="getReviewCountAvg" parameterType="int" resultType="com.nextroom.vo.ThemeVo"> -->

	<!-- <![CDATA[ -->

	<!-- select themeNo, avg(rating) aRating, avg(feelLevel) aFeelLevel -->
	<!-- from review -->
	<!-- GROUP BY themeNo; -->

	<!-- ]]> -->

	<!-- </select> -->


	<!-- 장르 리스트 가져오기 -->
	<select id="getGenreList" resultType="com.nextroom.vo.CafeVo">
		<![CDATA[
			select genre jenre
			from genre
			order by genre asc
			
		]]>
	</select>

	<!-- 카페 업데이트 - 파일 있을때 -->
	<update id="updateCafe-basic">
		<![CDATA[
			update cafe
			set 
				cafeName = #{cafeName}, 
				cafeHp = #{cafeHp}, 
				openTime = #{openTime}, 
				closeTime = #{closeTime}, 
				cafeIntro = #{cafeIntro}, 
				url = #{url}, 
				cafeImg = #{cafeImg},
				postCode = #{postCode},
				address = #{address}, 
				addressDetail = #{addressDetail},  
				printAddress = #{printAddress}, 
				sido = #{sido}, 
				sigungu = #{sigungu},
				sidoDetail = #{sidoDetail},
				latitude = #{latitude},
				longitude = #{longitude}
			where cafeNo = #{cafeNo}
		]]>
	</update>

	<!-- 카페 업데이트 - 파일 없을때 -->
	<update id="updateCafe-noFile" parameterType="com.nextroom.vo.CafeVo">
		<![CDATA[
			update cafe
			set 
				cafeName = #{cafeName}, 
				cafeHp = #{cafeHp}, 
				openTime = #{openTime}, 
				closeTime = #{closeTime}, 
				cafeIntro = #{cafeIntro}, 
				url = #{url},
				postCode = #{postCode},
				address = #{address}, 
				addressDetail = #{addressDetail},  
				printAddress = #{printAddress}, 
				sido = #{sido}, 
				sigungu = #{sigungu},
				sidoDetail = #{sidoDetail},
				latitude = #{latitude},
				longitude = #{longitude}
			where cafeNo = #{cafeNo}
		]]>
	</update>

	<!-- 카페 내부이미지 업데이트 - 파일 있을때 -->
	<!-- 카페 내부이미지 업데이트 - 부분 수정.. 어떻게? 뭔가 테마 이미지 고유넘버 있으면 될거같기도 하고 -->

	<!-- 테마 업데이트 - 파일 있을때 -->
	<update id="updateTheme-basic">
		<![CDATA[
			update theme
			set 
				themeName = #{themeName},
				themeImg = #{themeImg},
				jenre = #{jenre},
				levels = #{levels},
				themeType = #{themeType},
				playTime = #{playTime},
				activity = #{activity},
				themeIntro = #{themeIntro},
				pRecommendMin = #{pRecommendMin},
				pRecommendMax = #{pRecommendMax},
				pMin = #{pMin},
				pMax = #{pMax}
			where themeNo = #{themeNo}
		]]>
	</update>

	<!-- 테마 업데이트 - 파일 없을때 -->
	<update id="updateTheme-noFile" parameterType="com.nextroom.vo.CafeVo">
		<![CDATA[
			update theme
			set 
				themeName = #{themeName},
				jenre = #{jenre},
				levels = #{levels},
				themeType = #{themeType},
				playTime = #{playTime},
				activity = #{activity},
				themeIntro = #{themeIntro},
				pRecommendMin = #{pRecommendMin},
				pRecommendMax = #{pRecommendMax},
				pMin = #{pMin},
				pMax = #{pMax}
			where themeNo = #{themeNo}
		]]>
	</update>

	<!-- 테마 가격 삭제 -->
	<delete id="deleteThemePrice" parameterType="int">
		<![CDATA[
			delete themePrice
			where themeNo = #{themeNo}
		]]>
	</delete>


	<!-- 테마 시간표 삭제 -->
	<delete id="deleteThemeTime" parameterType="int">
		<![CDATA[
			delete themeTime
			where themeNo = #{themeNo}
		]]>
	</delete>

	<!-- 테마 삭제시 상태 업데이트 -->
	<update id="updateTheme-delete" parameterType="int">
		<![CDATA[
			update theme
			set 
				state = 'disable'
			where themeNo = #{themeNo}
		]]>
	</update>


	<!-- 인테리어 이미지 삭제 -->
	<delete id="inteDelete" parameterType="int">
		<![CDATA[
			delete interiorImg
			where interiorNo = #{inteNo}
		]]>
	</delete>


</mapper>